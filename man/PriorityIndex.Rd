% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PriorityIndex.R
\name{PriorityIndex}
\alias{PriorityIndex}
\title{Priority index.}
\usage{
PriorityIndex(..., effect = NULL, cutoff = NULL, rescale_by = NULL,
  rnd = 1)
}
\arguments{
\item{...}{objects of \code{\link{class}} \code{inla} with fitted values or random marginals.}

\item{effect}{string indicating if the priority index should be calculated using fitted values \code{"fitted"} or random effects \code{"random"}.}

\item{cutoff}{value above which fitted values or random effects would be in excess. If \code{effect = "random"}, the cutoff is used for untransformed marginal posteriors, so \code{cutoff = 0} (default) is used to calculate the probability of relative risk (odds ratio) > 1.}

\item{rescale_by}{column name or column index of the data used to fit the model. It works only when \code{effect = "fitted"}. See \code{Details}.}
}
\value{
PI for each observation..PI values will be returned in a \code{\link{vector}} only if one model with fitted values (or one random effect) is evaluated; \code{\link{data.frame}} or \code{\link{list}} otherwise.
}
\description{
Priority index (PI) given by Fitted or random effects weighted by the probability of the effects being higher than a cutoff value. PI values are scaled shuch tath 0 <= PI <= 100.
}
\details{
\code{rescale_by} is intended for spatiotemporal models, where \code{rescale_by} is the temporal variable. The result is a priority index rescaled within each temporal unit. If more than one model is provided to the first argument \code{...}, all of them must model the same spatiotemporal units.
}
\examples{
data(sp)

mod1 <- inla(aan ~ f(id, model = 'bym', graph = sp.adj),
             E = eaan,
             family = 'poisson', data = spn,
             control.predictor = list(compute = TRUE))

mod2 <- inla(aan ~ shvn + f(id, model = 'bym', graph = sp.adj),
             E = eaan,
             family = 'poisson', data = spn,
             control.predictor = list(compute = TRUE))

see <- RandomEffectsExcess(mod1, mod2, cutoff = 1)
}
